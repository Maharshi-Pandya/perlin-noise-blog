{"version":3,"sources":["components/BlogHeader.js","assets/noisewood1.jpg","components/Introduction.js","assets/pnVisual.gif","components/WWWA.js","components/BlogSetup.js","components/LetsVisualize.js","components/SetConsoleSize.js","assets/PerlinNoisePlot.png","assets/RandomNoisePlot.png","assets/PNJump.png","components/DrawPerlinConsole.js","components/BlogMain.js","components/FinalSteps.js","assets/KALinkImg.png","assets/AdrianIoLinkImg.png","assets/WikiLinkImg.jpg","assets/Rosetta.png","assets/Raouf.png","components/LinksAndCits.js","components/BlogContent.js","App.js","index.js"],"names":["BlogHeader","className","BlogIntro","src","noisewood","alt","href","WWWA","pnVisual","BlogSetup","class","aria-hidden","LetsVisualize","SetConsoleSize","DrawPerlinConsole","RandomNoisePlot","PerlinNoisePlot","PNJump","BlogMain","FinalSteps","LinksAndCits","KALinkImg","AdrianIoLinkImg","WikiLinkImg","Rosetta","Raouf","BlogContent","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91a725c7.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\n\nfunction BlogHeader() {\n    return (\n        <Fragment>\n            <div>\n                <div className=\"container-fluid pn-noise-image\">\n                </div>\n                <div className=\"container-fluid\">\n                    <div className=\"pn-header mt-4 text-center align-middle\">\n                        <h1>\n                            Perlin Noise\n                            <br/>\n                            Visualization                \n                        </h1>\n                        <p className=\"lead pn-lead mt-3\">\n                            in C/C++\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default BlogHeader;","export default __webpack_public_path__ + \"static/media/noisewood1.51458de0.jpg\";","import React, {Fragment} from 'react';\nimport noisewood from \"../assets/noisewood1.jpg\";\nimport BlogContent from './BlogContent';\n\nfunction BlogIntro() {\n    return (\n        <Fragment>\n            <h1 className=\"pn-topic-header liner\">\n                    Introduction\n                </h1>\n                <p className=\"para-content mt-3\">\n                    First off, before diving straight into the Perlin Noise Visualisation program in C/C++, \n                    lets discuss what exactly is Perlin Noise.\n                    <br /><br />\n                    You see, back then (in 1980s) CGI was not as powerful as it is today. \n                    The textures which resulted from CGI at that time were very \"machine-like\" and not natural.\n                    Tired of this, Kenneth H. Perlin developed a technique (more formally, an algorithm) \n                    to produce textures which looked natural i.e. \n                    Textures which should have some randomness to it yet appear smooth.\n                </p>\n                <div className=\"mt-5 text-center\">\n                    <img className=\"wood-img\" src={noisewood} alt=\"Procedural generation of wood texture\"/>\n                    <p className=\"mt-3 wood-img-footer\">\n                        Procedural generation of wood texture:\n                        <a className=\"ml-2\" href=\"https://lodev.org/cgtutor/randomnoise.html\">\n                        Image source\n                        </a>\n                    </p>\n                </div>\n                <p className=\"para-content mt-5\">\n                    - Perlin Noise is a type of Gradient Noise. \n                    Other examples of Gradient Noise are Simplex Noise and OpenSimplex Noise \n                    which were developed later.\n                    <br/><br/>\n                    - Today, Perlin Noise (along with other noise types) is largely used in \n                    computer graphics. \n                    Ranging from creating organic textures to creating organic natural \n                    looking \"worlds\", the applications are <span className=\"bold-text\">VAST</span>.\n\n                    <br/><br/>\n                    In this blog we will be visualising what Perlin Noise looks like inside of our beloved \n                    terminal using ASCII characters. \n                    We won't be looking at the details of how the Perlin Noise algorithm works, \n                    but I will embed some links and citations for those who \n                    want to go down that rabbit hole.\n                </p>\n        </Fragment>\n    );\n}\n\nexport default BlogIntro;","export default __webpack_public_path__ + \"static/media/pnVisual.ee12a1b3.gif\";","import React, {Fragment} from \"react\";\nimport pnVisual from \"../assets/pnVisual.gif\"\n\nfunction WWWA() {\n    return (\n        <Fragment>\n            <h1 className=\"pn-topic-header mt-5 liner\">\n                    What will we achieve?\n                </h1>\n                <p className=\"para-content mt-3\">\n                    Here's the visualization of what we will achieve.\n                </p>\n                <p className=\"bq mt-3 ml-3 mr-5\">\n                    Note: This program will work only in unix shells. \n                </p>\n                <div className=\"mt-3 text-center\">\n                    <img src={pnVisual} className=\"pn-visual-img\"></img>\n                </div>\n        </Fragment>\n    );\n}\n\nexport default WWWA;","import React, {Fragment} from \"react\";\n\nfunction BlogSetup() {\n    return (\n        <Fragment>\n            <h1 className=\"pn-topic-header mt-5 liner\">\n                    Setup\n                </h1>\n                <p class=\"para-content mt-3\">\n                    <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                    <span className=\"ml-3\">\n                        Your preferred code editor (eg. Vim, VS Code, Sublime Text etc...)\n                    </span>\n\n                    <br />\n\n                    <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                    <span className=\"ml-3\">\n                        A C/C++ compiler to compile and run the program (eg. \n                        <a className=\"ml-1\" href=\"https://gcc.gnu.org/\">\n                            GCC/G++\n                        </a>\n                         ,\n                        <a className=\"ml-1\" href=\"https://clang.llvm.org/\">\n                            Clang \n                        </a>\n                        <span className=\"ml-1\">\n                            etc...)\n                        </span>\n                    </span>\n\n                    <br />\n\n                    <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                    <span className=\"ml-3\">\n                        That's pretty much it. This point is included just because a 3 point \n                        setup looks and feels better xD\n                    </span>\n                </p>\n        </Fragment>\n    );\n}\n\nexport default BlogSetup;","import React, {Fragment} from \"react\";\n\nfunction LetsVisualize() {\n    return (\n        <Fragment>\n            <h1 className=\"pn-topic-header mt-5 liner\">\n                    Lets Visualise!\n            </h1>\n            <p className=\"para-content\">\n                To start, create two files named&nbsp;\n                <span className=\"backtick-code\">\n                    PerlinNoise.h\n                </span>\n                &nbsp;and&nbsp;\n                <span className=\"backtick-code\">\n                    main.cpp\n                </span>\n                &nbsp;in your desired directory.\n            </p>\n\n            <div className=\"codefield-container\">\n                <div className=\"codefield-shell\">\n                    <span className=\"shell-prompt\">$</span>\n                    &nbsp;\n                    <span className=\"shell-cmd\">touch</span>\n                    &nbsp;PerlinNoise.h main.cpp\n                </div>\n                <div className=\"text-center mt-2 lan-id\">\n                    Language: Shell\n                </div>\n            </div>\n            \n            <p className=\"para-content mt-5\">\n                Next, in your&nbsp;\n                <span className=\"backtick-code\">\n                    PerlinNoise.h\n                </span>\n                &nbsp;file copy and paste&nbsp;\n                <a href=\"https://github.com/Maharshi-Pandya/Perlin-Noise-Implementation/blob/master/cpp-test/pn_header/PerlinNoise.h\">\n                    this code\n                </a>\n                &nbsp;from my Github repo. \n                This is the header file which we will use to generate noise values for any input we provide.\n                <br/><br/>\n                (Don't worry if you don't understand how it generates those values. \n                Look under \"Links and Citations\" for further details on the algorithm).\n\n                Moving on, in your&nbsp;\n                <span className=\"backtick-code\">\n                    main.cpp\n                </span> \n                &nbsp;file, add the following lines\n            </p>\n\n            <div className=\"codefield-container\">\n                <div className=\"codefield-cpp\">\n                    <span className=\"cpp-comments\">\n                        // for TIOCGWINSZ\n                    </span>\n                    <br/>\n                    <span className=\"cpp-inc\">\n                        #include\n                    </span>\n                    &nbsp;&lt;sys/ioctl.h&gt;&nbsp;\n\n                    <br/>\n\n                    <span className=\"cpp-comments\">\n                        // for STDOUT_FILENO\n                    </span>\n                    <br/>\n                    <span className=\"cpp-inc\">\n                        #include\n                    </span>\n                    &nbsp;&lt;sys/unistd.h&gt;&nbsp;\n                </div>\n                <div className=\"text-center mt-2 lan-id\">\n                    Language: Cpp\n                </div>\n            </div>\n\n            <p className=\"para-content mt-5\">\n                The files&nbsp;\n                <span className=\"backtick-code\">\n                    sys/ioctl.h\n                </span>\n                &nbsp;and&nbsp;\n                <span className=\"backtick-code\">\n                    unistd.h\n                </span>\n                &nbsp;are included so that \n                further in our program we can determine the size of the terminal we are \n                using so we are not limited to just hard-code the values ourselves.\n                <br/><br/>\n                Now, we will include the standard header files. So in your&nbsp;\n                <span className=\"backtick-code\">\n                    main.cpp\n                </span>\n                &nbsp;file, add\n            </p>\n\n            <div className=\"codefield-container\">\n                <div className=\"codefield-cpp\">\n                    <span className=\"cpp-comments\">\n                        // standard include\n                    </span>\n                    <br/>\n                    <span className=\"cpp-inc\">\n                        #include\n                    </span>\n                    &nbsp;&lt;stdio.h&gt;\n                    <br/>\n                    <span className=\"cpp-inc\">\n                        #include\n                    </span>\n                    &nbsp;&lt;cstdlib&gt;\n                    <br/>\n                    <span className=\"cpp-comments\">\n                        // signal handling\n                    </span>\n                    <br/>\n                    <span className=\"cpp-inc\">\n                        #include\n                    </span>\n                    &nbsp;&lt;csignal&gt;\n                    <br/>\n                    <span className=\"cpp-inc\">\n                        #include\n                    </span>\n                    &nbsp;\"PerlinNoise.h\"\n                    <br/><br/>\n                    <span className=\"cpp-comments\">\n                        // world width and height\n                    </span>\n                    <br/>\n                    <span className=\"cpp-dt\">\n                        int\n                    </span>\n                    &nbsp;w_width = 0;\n                    <br/>\n                    <span className=\"cpp-dt\">\n                        int\n                    </span>\n                    &nbsp;w_height = 0;\n                </div>\n                <div className=\"text-center mt-2 lan-id\">\n                    Language: Cpp\n                </div>\n            </div>\n\n            <p className=\"para-content mt-5\">\n                Here,&nbsp;\n                <span className=\"backtick-code\">\n                    PerlinNoise.h\n                </span>\n                &nbsp;is our custom header file. \n                Make sure it is in the same directory as your&nbsp;\n                <span className=\"backtick-code\">\n                    main.cpp\n                </span>\n                &nbsp;file. \n                The header file&nbsp;\n                <span className=\"backtick-code\">\n                    csignal\n                </span>\n                &nbsp;is for, \n                when we exit the visualisation using&nbsp;\n                <span className=\"backtick-code\">\n                    Ctrl-C\n                </span>\n                &nbsp;, it exits \"gracefully\".\n            </p>\n\n            <p className=\"para-content mt-3\">\n                We also defined 2 global&nbsp;\n                <span className=\"backtick-code\">\n                    ints\n                </span>\n                &nbsp;(i.e.&nbsp;\n                <span className=\"backtick-code\">\n                    w_width\n                </span>\n                &nbsp;and&nbsp;\n                <span className=\"backtick-code\">\n                    w_height\n                </span>\n                ) which are the width and \n                the height of our grid, where visualisation takes place.\n                <br/>\n                In the next section, we will write a function&nbsp;\n                <span className=\"backtick-code\">\n                    SetConsoleSize()\n                </span>\n                &nbsp;which sets the width and the height of our grid \n                equal to the width and the height of our terminal, respectively.\n            </p>\n        </Fragment>\n    );\n}\n\nexport default LetsVisualize;","import React, {Fragment} from \"react\";\n\nfunction SetConsoleSize() {\n    return (\n        <Fragment>\n            <h1 className=\"pn-topic-header mt-5 liner\">\n                    SetConsoleSize()\n            </h1>\n\n            <p className=\"para-content\">\n                Firstly, in your&nbsp;\n                <span className=\"backtick-code\">\n                    main.cpp\n                </span>\n                &nbsp;file add the following lines\n            </p>\n\n            <div className=\"codefield-container\">\n                <div className=\"codefield-cpp\">\n                    <span className=\"cpp-comments\">\n                        // Get the terminal size\n                    </span>\n                    <br/>\n                    <span className=\"cpp-dt\">\n                        void\n                    </span>\n                    &nbsp;SetConsoleSize(\n                        <span className=\"cpp-dt\">\n                            void\n                        </span>\n                    )\n                    <br />\n                    &#123;\n                    <br/>\n                    <span className=\"cpp-comments\">\n                        // use the ioctl object\n                    </span>\n                    <br/>\n                    <span className=\"cpp-uddt\">\n                        struct\n                    </span>\n                    &nbsp;winsize window;\n                    <br/>\n                    <span className=\"cpp-func\">\n                        ioctl\n                    </span>\n                    (STDOUT_FILENO, TIOCGWINSZ, &window);\n                    \n                    <br/><br/>\n                    <span className=\"cpp-comments\">\n                        // set the world width and height (-2 for safety reasons)\n                    </span>\n                    <br/>\n                    w_width = (<span className=\"cpp-dt\">int</span>)window.ws_col - <span className=\"cpp-consts\">2</span>;\n                    <br/>\n                    w_height = (<span className=\"cpp-dt\">int</span>)window.ws_row - <span className=\"cpp-consts\">2</span>;\n                    <br/>\n                    &#125;\n                </div>\n                <div className=\"text-center mt-2 lan-id\">\n                    Language: Cpp\n                </div>\n            </div>\n\n            <p className=\"para-content mt-5\">\n                This might seem very alien to you, but in essence:\n                <br/><br/>\n                <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                <span className=\"ml-3\">\n                    In Linux,&nbsp;\n                    <span className=\"backtick-code\">\n                        ioctl\n                    </span>\n                    &nbsp;is used to perform I/O control operation \n                    which uses the ioctl object&nbsp;\n                    <span className=\"backtick-code\">\n                        winsize\n                    </span>\n                    &nbsp;to get the window size of output buffer \n                    (\n                        <span className=\"backtick-code\">\n                            TIOCGWINSZ\n                        </span>\n                        &nbsp;is an integer which tells \n                    the ioctl function to get the window size).\n                </span>\n                <br/>\n                <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                <span className=\"ml-3\">\n                    Lastly, it sets the width and height variables, \n                    once it gets the information about the terminal.\n                </span>\n                <br/><br/>\n                This was all the setting up needed. Next section, \n                we will focus on the main visualisation. Suit yourself!\n            </p>\n        </Fragment>\n    );\n}\n\nexport default SetConsoleSize;","export default __webpack_public_path__ + \"static/media/PerlinNoisePlot.9dec6cf0.png\";","export default __webpack_public_path__ + \"static/media/RandomNoisePlot.139f71e0.png\";","export default __webpack_public_path__ + \"static/media/PNJump.fbf16187.png\";","import React, {Fragment} from \"react\";\nimport PerlinNoisePlot from \"../assets/PerlinNoisePlot.png\";\nimport RandomNoisePlot from \"../assets/RandomNoisePlot.png\";\nimport PNJump from \"../assets/PNJump.png\";\n\nfunction DrawPerlinConsole() {\n    return (\n        <Fragment>\n            <h1 className=\"pn-topic-header mt-5 liner\">\n                DrawPerlinConsole()\n            </h1>\n            <p className=\"para-content\">\n                Before adding any further code into our main file, \n                we need to look at how Perlin Noise works and what is noise space.\n            </p>\n\n            <p className=\"bq mt-3 ml-3 mr-5\">\n                Below are the comparison plots for Random Noise and Perlin Noise.\n            </p>\n\n            <p class=\"para-content mt-5 plot-headers\">\n                <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                <span className=\"ml-3\">\n                    Random Noise Plot\n                </span>\n            </p>\n\n            <div className=\"mt-2 text-center\">\n                <img src={RandomNoisePlot} className=\"pn-visual-img\"></img>\n            </div>\n\n            <p class=\"para-content mt-5\">\n                <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                <span className=\"ml-3\">\n                    Perlin Noise Plot\n                </span>\n            </p>\n\n            <div className=\"mt-2 text-center\">\n                <img src={PerlinNoisePlot} className=\"pn-visual-img\"></img>\n            </div>\n\n            <p className=\"para-content mt-4\">\n                As you can observe from the above plots, that in our \"Noise space\", \n                Perlin Noise generates smooth organic-looking \n                random values, while Random Noise is just a whole mess of sharp unnatural random values. \n                <br/><br/>\n                So in-order to visualise Perlin Noise, we need to go forward on \n                the Time axis in small incremental steps, \n                because if we make \"long jumps\" along the Time axis, \n                Perlin Noise will not be smooth appear just like Random Noise, \n                as evident from the below image.\n            </p>\n\n            <div className=\"mt-5 text-center\">\n                <img src={PNJump} className=\"pn-visual-img\"></img>\n            </div>\n\n            <div className=\"text-center\">\n                <p className=\"mt-3 wood-img-footer\">\n                    Image Source:\n                    <a className=\"ml-2\" href=\"https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-noise/a/perlin-noise\">\n                        Khan Academy\n                    </a>\n                </p>\n            </div>\n\n            <p className=\"para-content mt-4\">\n                Since our&nbsp;\n                <span className=\"backtick-code\">\n                    PerlinNoise.h\n                </span>\n                &nbsp;header file can take three dimensional input (as a point) to \n                calculate the noise value at that point, we can consider X and Y axis as noise \n                values on our 2-D grid and the Z-axis as the time axis. So as we move along the Z-axis infinitesimally we generate new organic noise values repeatedly. \n                This is the basis of the&nbsp;\n                <span className=\"backtick-code\">\n                    PerlinDrawConsole()\n                </span>\n                &nbsp;function.\n\n                <br/><br/>\n                Now, in your&nbsp;\n                <span className=\"backtick-code\">\n                    main.cpp\n                </span>\n                &nbsp;file add\n            </p>\n\n            <div className=\"codefield-container\">\n                <div className=\"codefield-cpp\">\n                    <span className=\"cpp-comments\">\n                        // we now have the width and height; can visualize noise\n                    </span>\n                    <br/>\n                    <span className=\"cpp-dt\">\n                        float\n                    </span>\n                    &nbsp;zoff = 0.f;\n                    <br/>\n                    <span className=\"cpp-dt\">\n                        void\n                    </span>\n                    &nbsp;DrawPerlinConsole(<span className=\"cpp-dt\">void</span>)\n                    <br/>\n                    &#123;\n                    <br/>\n                    <span className=\"cpp-comments\">\n                        // char to draw\n                    </span>\n                    <br/>\n                    <span className=\"cpp-dt\">\n                        char\n                    </span>\n                    &nbsp;charval = '.';\n                    <br/><br/>\n                    <span className=\"cpp-dt\">\n                        float\n                    </span>\n                    &nbsp;xoff, yoff = <span className=\"cpp-consts\">0.</span>f;\n                    <br/>\n                    <span className=\"cpp-dt\">\n                        float\n                    </span>\n                    &nbsp;incr = <span className=\"cpp-consts\">0.1</span>f;\n                    <br/><br/>\n                    <span className=\"cpp-comments\">\n                        // travel through the noise space in time\n                    </span>\n                    <br/>\n                    <span className=\"cpp-dt\">\n                        float\n                    </span>\n                    &nbsp;time_step = <span className=\"cpp-consts\">.001</span>f;\n                    <br/><br/>\n                    <span className=\"cpp-comments\">\n                        // for every point, calc the noise val\n                    </span>\n                    <br/>\n                    <span className=\"cpp-func\">\n                        for\n                    </span>\n                    (    \n                    <span className=\"cpp-dt\">\n                        int\n                    </span>\n                        &nbsp;y=0; {\"y<w_height;\"} {\"y++\"}\n                    )\n                    <br/>\n                    &#123;\n                    <br/>\n                    <span className=\"cpp-comments\">\n                        // increment yoff, and start xoff at 0 for every yoff\n                    </span>\n                    <br/>\n                    yoff += incr;\n                    <br/>\n                    xoff = <span className=\"cpp-consts\">0.</span>f;\n                    <br/>\n                    <span className=\"cpp-func\">\n                        for\n                    </span>\n                    (\n                    <span className=\"cpp-dt\">\n                        int\n                    </span>\n                    &nbsp;x=0; {\"x<w_width; x++\"}\n                    )\n                    <br/>\n                    &#123;\n                    <br/>\n                    <span className=\"cpp-comments\">\n                        // calc noise value for xy, at time = zoff\n                    </span>\n                    <br/>\n                    <span className=\"cpp-dt\">\n                        float\n                    </span>\n                    &nbsp;noise_value =&nbsp;\n                    <span className=\"cpp-func\">\n                        pn_noise\n                    </span>\n                    (xoff, yoff, zoff);\n                    <br/><br/>\n                    <span className=\"cpp-comments\">\n                        // based on the noise value, print the char\n                    </span>\n                    <br/>\n                    {\"charval = noise_value < \"}\n                    <span className=\"cpp-consts\">0.5</span>\n                    {\" ? '.' : '*';\"}\n                    <br/>\n                    <span className=\"cpp-func\">\n                        printf\n                    </span>\n                    (\n                        <span className=\"cpp-dt\">\n                            \"%c\"\n                        </span>\n                        ,{' charval'}\n                    )\n                    <br/><br/>\n                    xoff += incr;\n                    <br/>\n                    &#125;\n                    <br/>\n                    <span className=\"cpp-func\">\n                        printf\n                    </span>\n                    (\"\\n\");\n                    <br/>\n                    &#125;\n                    <br/>\n                    <span className=\"cpp-comments\">\n                        // increment zoff by the time step\n                    </span>\n                    <br/>\n                    zoff += time_step;\n                    <br/><br/>\n                    <span className=\"cpp-comments\">\n                        // move back up by w_height to render again\n                    </span>\n                    <br/>\n                    <span className=\"cpp-func\">\n                        printf\n                    </span>\n                    (\n                    <span className=\"cpp-dt\">\n                        \"\\033[%dA\"\n                    </span>\n                    {\", w_height\"}\n                    );\n                    <br/>\n                    &#125;\n                    <br/>\n                </div>\n                <div className=\"text-center mt-2 lan-id\">\n                    Language: Cpp\n                </div>\n            </div>\n\n            <p className=\"para-content mt-5\">\n                This code along with the comments is self-explanatory.\n                <br/><br/>\n                <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                <span className=\"ml-3\">\n                    In the above code snippet we have defined&nbsp;\n                    <span className=\"backtick-code\">\n                        xoff\n                    </span>\n                    ,&nbsp;\n                    <span className=\"backtick-code\">\n                        yoff\n                    </span>\n                    &nbsp;and&nbsp;\n                    <span className=\"backtick-code\">\n                        zoff\n                    </span>\n                    &nbsp;variables to move \n                    along the noise space in these directions. \n                    We start&nbsp;\n                    <span className=\"backtick-code\">\n                        xoff\n                    </span>\n                    &nbsp;at 0 for every value of&nbsp;\n                    <span className=\"backtick-code\">\n                        yoff\n                    </span>\n                    &nbsp;and calculate the noise values for a \n                    particular row and print an ANSI escape character for a particular noise value. \n                    In this case if noise value is below&nbsp;\n                    <span className=\"backtick-code\">\n                        0.5 \n                    </span>\n                    &nbsp;it prints&nbsp;\n                    <span className=\"backtick-code\">\n                        .\n                    </span>\n                    &nbsp;else it prints&nbsp;\n                    <span className=\"backtick-code\">\n                       *\n                    </span>\n                    .\n\n                    <br/><br/>\n\n                    <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                    <span className=\"ml-3\">\n                        Then, we move forward in time (\n                            <span className=\"backtick-code\">\n                                off\n                            </span>\n                            &nbsp;increments by&nbsp;\n                            <span className=\"backtick-code\">\n                                time_step\n                            </span>\n                            ).\n                    </span>\n\n                    <br/><br/>\n\n                    <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                    <span className=\"ml-3\">\n                        Once, the entire grid is filled with noise values, to update the current grid, \n                        we use special ANSI escape sequence to move the cursor position to \n                        start of the grid.&nbsp; \n                        <span className=\"backtick-code\">\n                            \\033[kA\n                        </span>\n                        &nbsp;moves the cursor back up by&nbsp;\n                        <span className=\"backtick-code\">\n                            k\n                        </span>\n                        &nbsp;units. \n                        So when,&nbsp;\n                        <span className=\"backtick-code\">\n                            PerlinDrawConsole\n                        </span>\n                        &nbsp;is called again, we update the grid noise values.\n                    </span>\n                </span>\n            </p>\n\n            <hr className=\"hr-style mt-5\" />\n\n            <p className=\"para-content mt-5\">\n                Since this is an infinite rendering, we need a way to break the program and exit gracefully. \n                We can do this by using&nbsp;\n                <span className=\"backtick-code\">\n                    signal handler\n                </span>\n                . What it does is, \n                whenever the user presses&nbsp;\n                <span className=\"backtick-code\">\n                    Ctrl-C\n                </span>\n                &nbsp;on their keyboard, we listen to this signal and \n                instead of exiting the program abruptly, we move down below the grid and then exit with a message.\n                <br/><br/>\n                Add in your&nbsp;\n                <span className=\"backtick-code\">\n                    main.cpp\n                </span>\n                &nbsp;file\n            </p>\n\n            <div className=\"codefield-container\">\n                <div className=\"codefield-cpp\">\n                    <span className=\"cpp-comments\">\n                        // when Ctrl-C is pressed\n                    </span>\n                    <br/>\n                    <span className=\"cpp-dt\">\n                        void\n                    </span>\n                    &nbsp;ctrlCSignalHandler(\n                    <span className=\"cpp-dt\">\n                        int\n                    </span>\n                    &nbsp;signum)\n                    <br/>\n                    &#123;\n                    <br/>\n                    <span className=\"cpp-comments\">\n                        // go down w_height lines\n                    </span>\n                    <br/>\n                    <span className=\"cpp-func\">\n                        printf\n                    </span>\n                    (\n                        <span className=\"cpp-dt\">\n                            \"\\033[%dB\"\n                        </span>\n                        , w_height);\n                    <br/>\n                    <span className=\"cpp-func\">\n                        printf\n                    </span>\n                    (\"\\nAight! Imma head out...\\n\\n\");\n                    <br/><br/>\n                    <span className=\"cpp-func\">\n                        exit\n                    </span>\n                    (signum);\n                    <br/>\n                    &#125;\n                </div>\n                <div className=\"text-center mt-2 lan-id\">\n                    Language: Cpp\n                </div>\n            </div>\n\n            <p className=\"para-content mt-5\">\n                This will be our callback (handler) function when&nbsp;\n                <span className=\"backtick-code\">\n                    Ctrl-C\n                </span>\n                &nbsp;is pressed. \n                It takes in a&nbsp;\n                <span className=\"backtick-code\">\n                    signum\n                </span>\n                &nbsp;integer as an argument which is the number associated with \n                the&nbsp;\n                <span className=\"backtick-code\">\n                    Ctrl-C\n                </span>\n                &nbsp;signal.\n\n                <br/><br/>\n\n                Now in the body of the function, we move down below the grid using \n                ANSI escape sequence&nbsp;\n                <span className=\"backtick-code\">\n                    \\033[kB\n                </span>\n                &nbsp;which moves the cursor down by&nbsp;\n                <span className=\"backtick-code\">\n                    k\n                </span>\n                &nbsp;units. \n                And then, we print our exit message (which can be anything you like) and \n                lastly we exit the program using&nbsp;\n                <span className=\"backtick-code\">\n                    exit\n                </span>\n                &nbsp;function with the associated&nbsp;\n                <span className=\"backtick-code\">\n                    signum\n                </span>\n                .\n\n                <br/><br/>\n\n                Next section, we will combine everything using a&nbsp;\n                <span className=\"backtick-code\">\n                    main()\n                </span>\n                &nbsp;function in our&nbsp;\n                <span className=\"backtick-code\">\n                    main.cpp\n                </span>\n                &nbsp;file.\n            </p>\n        </Fragment>\n    );\n}\n\nexport default DrawPerlinConsole;","import React, {Fragment} from \"react\";\n\nfunction BlogMain() {\n    return (\n        <Fragment>\n            <h1 className=\"pn-topic-header mt-5 liner\">\n                main()\n            </h1>\n\n            <p className=\"para-content\">\n                Now everything from here is a cake-walk.\n                <br/><br/>\n                In your&nbsp;\n                <span className=\"backtick-code\">\n                    main.cpp\n                </span>\n                &nbsp;file add\n            </p>\n\n            <div className=\"codefield-container\">\n                <div className=\"codefield-cpp\">\n                    <span className=\"cpp-comments\">\n                        // driver code\n                    </span>\n                    <br/>\n                    <span className=\"cpp-dt\">\n                        int\n                    </span>\n                    &nbsp;main(<span className=\"cpp-dt\">int</span>&nbsp;argc,&nbsp;\n                    <span className=\"cpp-func\">\n                        char const\n                    </span>\n                    &nbsp;*argv[])\n\n                    <br/>\n                    &#123;\n                    <br/>\n                    <span className=\"cpp-comments\">\n                        // register the signal handler\n                    </span>\n                    <br/>\n                    <span className=\"cpp-func\">\n                        signal\n                    </span>\n                    (<span className=\"cpp-dt\">SIGINT</span>, ctrlCSignalHandler);\n\n                    <br/><br/>\n\n                    <span className=\"cpp-comments\">\n                        // init and activate the noise space\n                    </span>\n\n                    <br/>\n\n                    <span className=\"cpp-func\">\n                        SetConsoleSize\n                    </span>\n                    ();\n                    <br/>\n                    <span className=\"cpp-func\">\n                        pn_init\n                    </span>\n                    ();\n\n                    <br/><br/>\n\n                    <span className=\"cpp-comments\">\n                        // loop and render\n                    </span>\n                    \n                    <br/>\n                    \n                    <span className=\"cpp-func\">\n                        while\n                    </span>\n                    (<span className=\"cpp-consts\">1</span>)\n                    <br/>\n                    &#123;\n                    <br/>\n\n                    <span className=\"cpp-func\">\n                        DrawPerlinConsole\n                    </span>\n                    ();\n                    \n                    <br/><br/>\n\n                    <span className=\"cpp-comments\">\n                        // explicit sleep function to limit cpu usage\n                    </span>\n                    <br/>\n                    <span className=\"cpp-func\">\n                        usleep\n                    </span>\n                    (<span className=\"cpp-consts\">1000</span>);\n                    <br/>\n                    &#125;\n                    <br/>\n                    <span className=\"cpp-dt\">\n                        return\n                    </span>\n                    &nbsp;<span className=\"cpp-consts\">\n                        0\n                    </span>;\n                    <br/>\n                    &#125;\n                    <br/>\n                </div>\n                <div className=\"text-center mt-2 lan-id\">\n                    Language: Cpp\n                </div>\n            </div>\n\n            <p className=\"para-content mt-5\">\n            <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                <span className=\"ml-3\">\n                    First off, before everything, we register our signal handler using the&nbsp;\n                    <span className=\"backtick-code\">\n                        signal \n                    </span>\n                    &nbsp;function in&nbsp;\n                    <span className=\"backtick-code\">\n                        {\"<csignal>\"}\n                    </span>\n                    &nbsp;header file. It takes the&nbsp;\n                    <span className=\"backtick-code\">\n                        Ctrl-C\n                    </span>\n                    &nbsp;signal number i.e.&nbsp;\n                    <span className=\"backtick-code\">\n                        SIGINT\n                    </span>\n                    &nbsp;(predefined in C++) \n                    as the first argument and our custom signal handler as the second argument.\n                </span>\n\n                <br/><br/>\n\n                <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                <span className=\"ml-3\">\n                    We then set the console size and \"activate\" the noise space. \n                    It is necessary to generate Perlin Noise values.\n                </span>\n\n                <br/><br/>\n\n                <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i>\n                <span className=\"ml-3\">\n                    Finally, using an infinite loop, we repeatedly render our \n                    visualisation via the&nbsp;\n                    <span className=\"backtick-code\">\n                        DrawPerlinConsole()\n                    </span>\n                    &nbsp;method.\n                </span>\n            </p>\n\n            <p className=\"bq mt-4 ml-3 mr-5\">\n                Note: Since infinite while loop runs as fast as it can, it will be kind of overkill for us. \n                So I have used the&nbsp;\n                <span className=\"backtick-code\">\n                    usleep\n                </span>\n                &nbsp;function for Linux, \n                which sleeps for 0.001 seconds after every while loop render so as to not overkill the rendering.\n            </p>\n\n            <div className=\"text-center\">\n                <p className=\"para-content mt-4\">\n                    With this, we are done with our&nbsp;\n                    <span className=\"backtick-code\">\n                        main.cpp\n                    </span>\n                    &nbsp;file!\n                    <br/>\n                </p>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default BlogMain;","import React, {Fragment} from \"react\";\n\nfunction FinalSteps() {\n    return (\n        <Fragment>\n            <h1 className=\"pn-topic-header mt-5 liner\">\n                Final Steps\n            </h1>\n\n            <p className=\"para-content\">\n                Last thing left now is to run this program in your terminal using any \n                C++ compiler and witness the rendering in action!\n            </p>\n            \n            <div className=\"codefield-container\">\n                <div className=\"codefield-shell\">\n                    <span className=\"shell-prompt\">\n                        $\n                    </span>\n                    &nbsp;\n                    <span className=\"shell-cmd\">\n                        g++\n                    </span>\n                    &nbsp;main.cpp\n                    <br/>\n                    <span className=\"shell-prompt\">\n                        $\n                    </span>\n                    &nbsp;./a.out\n                </div>\n                <div className=\"text-center mt-2 lan-id\">\n                    Language: Shell\n                </div>\n            </div>\n\n            <p className=\"para-content mt-5\">\n                With this, you will see the smooth noise values fill up your screen :)\n            </p>\n        </Fragment>\n    );\n}\n\nexport default FinalSteps;","export default __webpack_public_path__ + \"static/media/KALinkImg.3172fc3b.png\";","export default __webpack_public_path__ + \"static/media/AdrianIoLinkImg.3dc6065b.png\";","export default __webpack_public_path__ + \"static/media/WikiLinkImg.245f484e.jpg\";","export default __webpack_public_path__ + \"static/media/Rosetta.3f1f4e29.png\";","export default __webpack_public_path__ + \"static/media/Raouf.b6d04df0.png\";","import React, {Fragment} from \"react\";\nimport KALinkImg from \"../assets/KALinkImg.png\";\nimport AdrianIoLinkImg from \"../assets/AdrianIoLinkImg.png\";\nimport WikiLinkImg from \"../assets/WikiLinkImg.jpg\";\nimport Rosetta from \"../assets/Rosetta.png\";\nimport Raouf from \"../assets/Raouf.png\";\n\nfunction LinksAndCits() {\n    return (\n        <Fragment>\n            <h1 className=\"pn-topic-header mt-5 liner\">\n                Links And Citations\n            </h1>\n\n            <div class=\"row\">\n                    <div class=\"col-sm-4 mt-5\">\n                        <div class=\"card bg-dark link-card\">\n                            <img src={KALinkImg} class=\"card-img-top\" alt=\"...\" />\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Perlin Noise: Khan Academy</h5>\n                                <p class=\"card-text\">\n                                    A good random number generator produces numbers that have no \n                                    relationship and show no discernible pattern.<br/> \n                                    As we are beginning to see...\n                                </p>\n                                <a href=\"https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-noise/a/perlin-noise\" class=\"btn btn-primary\">View page</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-sm-4 mt-5\">\n                        <div class=\"card bg-dark link-card\">\n                            <img src={AdrianIoLinkImg} class=\"card-img-top\" alt=\"...\" />\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Understanding Perlin Noise: Adrain's Soapbox</h5>\n                                <p class=\"card-text\">\n                                    The objective of this article is to present an \n                                    easy-to-understand analysis of Ken Perlin's Improved Perlin Noise.\n                                </p>\n                                <a href=\"https://adrianb.io/2014/08/09/perlinnoise.html\" class=\"btn btn-primary\">View page</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-sm-4 mt-5\">\n                        <div class=\"card bg-dark link-card\">\n                            <img src={WikiLinkImg} class=\"card-img-top\" alt=\"...\" />\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Wikipedia: Perlin Noise</h5>\n                                <p class=\"card-text\">\n                                    Perlin noise is a type of gradient noise developed by Ken Perlin.\n                                    He developed perlin noise in 1983 as a result of his frustration with the \"machine-like\" look...\n                                </p>\n                                <a href=\"https://en.wikipedia.org/wiki/Perlin_noise\" class=\"btn btn-primary\">View page</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-sm-4 mt-5\">\n                        <div class=\"card bg-dark link-card\">\n                            <img src={Rosetta} class=\"card-img-top\" alt=\"...\" />\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Rosetta Code: Perlin Noise Implementations</h5>\n                                <p class=\"card-text\">\n                                    Implementation of the Perlin Noise algorithm in various languages...\n                                </p>\n                                <a href=\"https://rosettacode.org/wiki/Perlin_noise\" class=\"btn btn-primary\">View page</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-sm-4 mt-5\">\n                        <div class=\"card bg-dark link-card\">\n                            <img src={Raouf} class=\"card-img-top\" alt=\"...\" />\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\">Raouf's Blog: A Procedural Generation Algorithm</h5>\n                                <p class=\"card-text\">\n                                Perlin noise is a popular procedural generation algorithm invented by Ken Perlin...\n                                </p>\n                                <a href=\"https://rtouti.github.io/graphics/perlin-noise-algorithm#:~:text=Perlin%20noise%20is%20a%20popular,by%20an%20artist%20or%20designer.&text=Simplex%20noise%20is%20different%20but,Value%20noise%20is%20also%20different.\" class=\"btn btn-primary\">View page</a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"text-center mt-5\">\n                    <p className=\"mt-3 hr-style1\">\n                    </p>\n                    <p className=\"para-content author mt-3\">\n                        Penned by ✍️:\n                        <br/>\n                        Maharshi Pandya\n                    </p>\n                    <p className=\"mt-3 hr-style1\">\n                    </p>\n                </div>\n        </Fragment>\n    );\n}\n\nexport default LinksAndCits;","import React, {Fragment} from \"react\";\nimport BlogIntro from \"./Introduction\";\nimport WWWA from \"./WWWA\";\nimport BlogSetup from \"./BlogSetup\";\nimport LetsVisualize from \"./LetsVisualize\";\nimport SetConsoleSize from \"./SetConsoleSize\";\nimport DrawPerlinConsole from \"./DrawPerlinConsole\";\nimport BlogMain from \"./BlogMain\";\nimport FinalSteps from \"./FinalSteps\";\nimport LinksAndCits from \"./LinksAndCits\";\n\nfunction BlogContent() {\n    return (\n        <Fragment>\n            <div className=\"container mt-4 text-white\">\n                <BlogIntro />\n                <WWWA />\n                <BlogSetup />\n                <LetsVisualize />\n                <SetConsoleSize />\n                <DrawPerlinConsole />\n                <BlogMain />\n                <FinalSteps />\n                <LinksAndCits />\n            </div>\n        </Fragment>\n    );\n\n}\n\nexport default BlogContent;","import React, {Fragment} from 'react';\nimport \"./App.css\";\nimport BlogHeader from './components/BlogHeader';\nimport BlogContent from './components/BlogContent';\n\nfunction App() {\n    return (\n        <Fragment>\n            <BlogHeader />\n            <br/><br/><br/>\n            <BlogContent/>\n        </Fragment>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);"],"sourceRoot":""}