(this["webpackJsonpperlin-noise-blog"]=this["webpackJsonpperlin-noise-blog"]||[]).push([[0],{11:function(e,s,c){"use strict";c.r(s);var a=c(1),t=c(3),i=c.n(t),n=(c(8),c(9),c(0));var r=function(){return Object(n.jsx)(a.Fragment,{children:Object(n.jsxs)("div",{children:[Object(n.jsx)("div",{className:"container-fluid pn-noise-image"}),Object(n.jsx)("div",{className:"container-fluid",children:Object(n.jsxs)("div",{className:"pn-header mt-4 text-center align-middle",children:[Object(n.jsxs)("h1",{children:["Perlin Noise",Object(n.jsx)("br",{}),"Visualization"]}),Object(n.jsx)("p",{className:"lead pn-lead mt-3",children:"in C/C++"})]})})]})})},l=c.p+"static/media/noisewood1.51458de0.jpg";var j=function(){return Object(n.jsxs)(a.Fragment,{children:[Object(n.jsx)("h1",{className:"pn-topic-header liner",children:"Introduction"}),Object(n.jsxs)("p",{className:"para-content mt-3",children:["First off, before diving straight into the Perlin Noise Visualisation program in C/C++, lets discuss what exactly is Perlin Noise.",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),'You see, back then (in 1980s) CGI was not as powerful as it is today. The textures which resulted from CGI at that time were very "machine-like" and not natural. Tired of this, Kenneth H. Perlin developed a technique (more formally, an algorithm) to produce textures which looked natural i.e. Textures which should have some randomness to it yet appear smooth.']}),Object(n.jsxs)("div",{className:"mt-5 text-center",children:[Object(n.jsx)("img",{className:"wood-img",src:l,alt:"Procedural generation of wood texture"}),Object(n.jsxs)("p",{className:"mt-3 wood-img-footer",children:["Procedural generation of wood texture:",Object(n.jsx)("a",{className:"ml-2",href:"https://lodev.org/cgtutor/randomnoise.html",children:"Image source"})]})]}),Object(n.jsxs)("p",{className:"para-content mt-5",children:["- Perlin Noise is a type of Gradient Noise. Other examples of Gradient Noise are Simplex Noise and OpenSimplex Noise which were developed later.",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),'- Today, Perlin Noise (along with other noise types) is largely used in computer graphics. Ranging from creating organic textures to creating organic natural looking "worlds", the applications are ',Object(n.jsx)("span",{className:"bold-text",children:"VAST"}),".",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),"In this blog we will be visualising what Perlin Noise looks like inside of our beloved terminal using ASCII characters. We won't be looking at the details of how the Perlin Noise algorithm works, but I will embed some links and citations for those who want to go down that rabbit hole."]})]})},d=c.p+"static/media/pnVisual.ee12a1b3.gif";var o=function(){return Object(n.jsxs)(a.Fragment,{children:[Object(n.jsx)("h1",{className:"pn-topic-header mt-5 liner",children:"What will we achieve?"}),Object(n.jsx)("p",{className:"para-content mt-3",children:"Here's the visualization of what we will achieve."}),Object(n.jsx)("p",{className:"bq mt-3 ml-3 mr-5",children:"Note: This program will work only in unix shells."}),Object(n.jsx)("div",{className:"mt-3 text-center",children:Object(n.jsx)("img",{src:d,className:"pn-visual-img"})})]})};var b=function(){return Object(n.jsxs)(a.Fragment,{children:[Object(n.jsx)("h1",{className:"pn-topic-header mt-5 liner",children:"Setup"}),Object(n.jsxs)("p",{class:"para-content mt-3",children:[Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsx)("span",{className:"ml-3",children:"Your preferred code editor (eg. Vim, VS Code, Sublime Text etc...)"}),Object(n.jsx)("br",{}),Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsxs)("span",{className:"ml-3",children:["A C/C++ compiler to compile and run the program (eg.",Object(n.jsx)("a",{className:"ml-1",href:"https://gcc.gnu.org/",children:"GCC/G++"}),",",Object(n.jsx)("a",{className:"ml-1",href:"https://clang.llvm.org/",children:"Clang"}),Object(n.jsx)("span",{className:"ml-1",children:"etc...)"})]}),Object(n.jsx)("br",{}),Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsx)("span",{className:"ml-3",children:"That's pretty much it. This point is included just because a 3 point setup looks and feels better xD"})]})]})};var h=function(){return Object(n.jsxs)(a.Fragment,{children:[Object(n.jsx)("h1",{className:"pn-topic-header mt-5 liner",children:"Lets Visualise!"}),Object(n.jsxs)("p",{className:"para-content",children:["To start, create two files named\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"PerlinNoise.h"}),"\xa0and\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"main.cpp"}),"\xa0in your desired directory."]}),Object(n.jsxs)("div",{className:"codefield-container",children:[Object(n.jsxs)("div",{className:"codefield-shell",children:[Object(n.jsx)("span",{className:"shell-prompt",children:"$"}),"\xa0",Object(n.jsx)("span",{className:"shell-cmd",children:"touch"}),"\xa0PerlinNoise.h main.cpp"]}),Object(n.jsx)("div",{className:"text-center mt-2 lan-id",children:"Language: Shell"})]}),Object(n.jsxs)("p",{className:"para-content mt-5",children:["Next, in your\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"PerlinNoise.h"}),"\xa0file copy and paste\xa0",Object(n.jsx)("a",{href:"https://github.com/Maharshi-Pandya/Perlin-Noise-Implementation/blob/master/cpp-test/pn_header/PerlinNoise.h",children:"this code"}),"\xa0from my Github repo. This is the header file which we will use to generate noise values for any input we provide.",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),"(Don't worry if you don't understand how it generates those values. Look under \"Links and Citations\" for further details on the algorithm). Moving on, in your\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"main.cpp"}),"\xa0file, add the following lines"]}),Object(n.jsxs)("div",{className:"codefield-container",children:[Object(n.jsxs)("div",{className:"codefield-cpp",children:[Object(n.jsx)("span",{className:"cpp-comments",children:"// for TIOCGWINSZ"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-inc",children:"#include"}),"\xa0<sys/ioctl.h>\xa0",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// for STDOUT_FILENO"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-inc",children:"#include"}),"\xa0<sys/unistd.h>\xa0"]}),Object(n.jsx)("div",{className:"text-center mt-2 lan-id",children:"Language: Cpp"})]}),Object(n.jsxs)("p",{className:"para-content mt-5",children:["The files\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"sys/ioctl.h"}),"\xa0and\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"unistd.h"}),"\xa0are included so that further in our program we can determine the size of the terminal we are using so we are not limited to just hard-code the values ourselves.",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),"Now, we will include the standard header files. So in your\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"main.cpp"}),"\xa0file, add"]}),Object(n.jsxs)("div",{className:"codefield-container",children:[Object(n.jsxs)("div",{className:"codefield-cpp",children:[Object(n.jsx)("span",{className:"cpp-comments",children:"// standard include"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-inc",children:"#include"}),"\xa0<stdio.h>",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-inc",children:"#include"}),"\xa0<cstdlib>",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// signal handling"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-inc",children:"#include"}),"\xa0<csignal>",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-inc",children:"#include"}),'\xa0"PerlinNoise.h"',Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// world width and height"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"int"}),"\xa0w_width = 0;",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"int"}),"\xa0w_height = 0;"]}),Object(n.jsx)("div",{className:"text-center mt-2 lan-id",children:"Language: Cpp"})]}),Object(n.jsxs)("p",{className:"para-content mt-5",children:["Here,\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"PerlinNoise.h"}),"\xa0is our custom header file. Make sure it is in the same directory as your\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"main.cpp"}),"\xa0file. The header file\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"csignal"}),"\xa0is for, when we exit the visualisation using\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"Ctrl-C"}),'\xa0, it exits "gracefully".']}),Object(n.jsxs)("p",{className:"para-content mt-3",children:["We also defined 2 global\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"ints"}),"\xa0(i.e.\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"w_width"}),"\xa0and\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"w_height"}),") which are the width and the height of our grid, where visualisation takes place.",Object(n.jsx)("br",{}),"In the next section, we will write a function\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"SetConsoleSize()"}),"\xa0which sets the width and the height of our grid equal to the width and the height of our terminal, respectively."]})]})};var p=function(){return Object(n.jsxs)(a.Fragment,{children:[Object(n.jsx)("h1",{className:"pn-topic-header mt-5 liner",children:"SetConsoleSize()"}),Object(n.jsxs)("p",{className:"para-content",children:["Firstly, in your\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"main.cpp"}),"\xa0file add the following lines"]}),Object(n.jsxs)("div",{className:"codefield-container",children:[Object(n.jsxs)("div",{className:"codefield-cpp",children:[Object(n.jsx)("span",{className:"cpp-comments",children:"// Get the terminal size"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"void"}),"\xa0SetConsoleSize(",Object(n.jsx)("span",{className:"cpp-dt",children:"void"}),")",Object(n.jsx)("br",{}),"{",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// use the ioctl object"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-uddt",children:"struct"}),"\xa0winsize window;",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"ioctl"}),"(STDOUT_FILENO, TIOCGWINSZ, &window);",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// set the world width and height (-2 for safety reasons)"}),Object(n.jsx)("br",{}),"w_width = (",Object(n.jsx)("span",{className:"cpp-dt",children:"int"}),")window.ws_col - ",Object(n.jsx)("span",{className:"cpp-consts",children:"2"}),";",Object(n.jsx)("br",{}),"w_height = (",Object(n.jsx)("span",{className:"cpp-dt",children:"int"}),")window.ws_row - ",Object(n.jsx)("span",{className:"cpp-consts",children:"2"}),";",Object(n.jsx)("br",{}),"}"]}),Object(n.jsx)("div",{className:"text-center mt-2 lan-id",children:"Language: Cpp"})]}),Object(n.jsxs)("p",{className:"para-content mt-5",children:["This might seem very alien to you, but in essence:",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsxs)("span",{className:"ml-3",children:["In Linux,\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"ioctl"}),"\xa0is used to perform I/O control operation which uses the ioctl object\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"winsize"}),"\xa0to get the window size of output buffer (",Object(n.jsx)("span",{className:"backtick-code",children:"TIOCGWINSZ"}),"\xa0is an integer which tells the ioctl function to get the window size)."]}),Object(n.jsx)("br",{}),Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsx)("span",{className:"ml-3",children:"Lastly, it sets the width and height variables, once it gets the information about the terminal."}),Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),"This was all the setting up needed. Next section, we will focus on the main visualisation. Suit yourself!"]})]})},m=c.p+"static/media/PerlinNoisePlot.9dec6cf0.png",x=c.p+"static/media/RandomNoisePlot.139f71e0.png",O=c.p+"static/media/PNJump.fbf16187.png";var u=function(){return Object(n.jsxs)(a.Fragment,{children:[Object(n.jsx)("h1",{className:"pn-topic-header mt-5 liner",children:"DrawPerlinConsole()"}),Object(n.jsx)("p",{className:"para-content",children:"Before adding any further code into our main file, we need to look at how Perlin Noise works and what is noise space."}),Object(n.jsx)("p",{className:"bq mt-3 ml-3 mr-5",children:"Below are the comparison plots for Random Noise and Perlin Noise."}),Object(n.jsxs)("p",{class:"para-content mt-5 plot-headers",children:[Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsx)("span",{className:"ml-3",children:"Random Noise Plot"})]}),Object(n.jsx)("div",{className:"mt-2 text-center",children:Object(n.jsx)("img",{src:x,className:"pn-visual-img"})}),Object(n.jsxs)("p",{class:"para-content mt-5",children:[Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsx)("span",{className:"ml-3",children:"Perlin Noise Plot"})]}),Object(n.jsx)("div",{className:"mt-2 text-center",children:Object(n.jsx)("img",{src:m,className:"pn-visual-img"})}),Object(n.jsxs)("p",{className:"para-content mt-4",children:['As you can observe from the above plots, that in our "Noise space", Perlin Noise generates smooth organic-looking random values, while Random Noise is just a whole mess of sharp unnatural random values.',Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),'So in-order to visualise Perlin Noise, we need to go forward on the Time axis in small incremental steps, because if we make "long jumps" along the Time axis, Perlin Noise will not be smooth appear just like Random Noise, as evident from the below image.']}),Object(n.jsx)("div",{className:"mt-5 text-center",children:Object(n.jsx)("img",{src:O,className:"pn-visual-img"})}),Object(n.jsx)("div",{className:"text-center",children:Object(n.jsxs)("p",{className:"mt-3 wood-img-footer",children:["Image Source:",Object(n.jsx)("a",{className:"ml-2",href:"https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-noise/a/perlin-noise",children:"Khan Academy"})]})}),Object(n.jsxs)("p",{className:"para-content mt-4",children:["Since our\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"PerlinNoise.h"}),"\xa0header file can take three dimensional input (as a point) to calculate the noise value at that point, we can consider X and Y axis as noise values on our 2-D grid and the Z-axis as the time axis. So as we move along the Z-axis infinitesimally we generate new organic noise values repeatedly. This is the basis of the\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"PerlinDrawConsole()"}),"\xa0function.",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),"Now, in your\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"main.cpp"}),"\xa0file add"]}),Object(n.jsxs)("div",{className:"codefield-container",children:[Object(n.jsxs)("div",{className:"codefield-cpp",children:[Object(n.jsx)("span",{className:"cpp-comments",children:"// we now have the width and height; can visualize noise"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"float"}),"\xa0zoff = 0.f;",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"void"}),"\xa0DrawPerlinConsole(",Object(n.jsx)("span",{className:"cpp-dt",children:"void"}),")",Object(n.jsx)("br",{}),"{",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// char to draw"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"char"}),"\xa0charval = '.';",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"float"}),"\xa0xoff, yoff = ",Object(n.jsx)("span",{className:"cpp-consts",children:"0."}),"f;",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"float"}),"\xa0incr = ",Object(n.jsx)("span",{className:"cpp-consts",children:"0.1"}),"f;",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// travel through the noise space in time"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"float"}),"\xa0time_step = ",Object(n.jsx)("span",{className:"cpp-consts",children:".001"}),"f;",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// for every point, calc the noise val"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"for"}),"(",Object(n.jsx)("span",{className:"cpp-dt",children:"int"}),"\xa0y=0; ","y<w_height;"," ","y++",")",Object(n.jsx)("br",{}),"{",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// increment yoff, and start xoff at 0 for every yoff"}),Object(n.jsx)("br",{}),"yoff += incr;",Object(n.jsx)("br",{}),"xoff = ",Object(n.jsx)("span",{className:"cpp-consts",children:"0."}),"f;",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"for"}),"(",Object(n.jsx)("span",{className:"cpp-dt",children:"int"}),"\xa0x=0; ","x<w_width; x++",")",Object(n.jsx)("br",{}),"{",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// calc noise value for xy, at time = zoff"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"float"}),"\xa0noise_value =\xa0",Object(n.jsx)("span",{className:"cpp-func",children:"pn_noise"}),"(xoff, yoff, zoff);",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// based on the noise value, print the char"}),Object(n.jsx)("br",{}),"charval = noise_value < ",Object(n.jsx)("span",{className:"cpp-consts",children:"0.5"})," ? '.' : '*';",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"printf"}),"(",Object(n.jsx)("span",{className:"cpp-dt",children:'"%c"'}),","," charval",")",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),"xoff += incr;",Object(n.jsx)("br",{}),"}",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"printf"}),'("\\n");',Object(n.jsx)("br",{}),"}",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// increment zoff by the time step"}),Object(n.jsx)("br",{}),"zoff += time_step;",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// move back up by w_height to render again"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"printf"}),"(",Object(n.jsx)("span",{className:"cpp-dt",children:'"\\033[%dA"'}),", w_height",");",Object(n.jsx)("br",{}),"}",Object(n.jsx)("br",{})]}),Object(n.jsx)("div",{className:"text-center mt-2 lan-id",children:"Language: Cpp"})]}),Object(n.jsxs)("p",{className:"para-content mt-5",children:["This code along with the comments is self-explanatory.",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsxs)("span",{className:"ml-3",children:["In the above code snippet we have defined\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"xoff"}),",\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"yoff"}),"\xa0and\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"zoff"}),"\xa0variables to move along the noise space in these directions. We start\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"xoff"}),"\xa0at 0 for every value of\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"yoff"}),"\xa0and calculate the noise values for a particular row and print an ANSI escape character for a particular noise value. In this case if noise value is below\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"0.5"}),"\xa0it prints\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"."}),"\xa0else it prints\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"*"}),".",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsxs)("span",{className:"ml-3",children:["Then, we move forward in time (",Object(n.jsx)("span",{className:"backtick-code",children:"off"}),"\xa0increments by\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"time_step"}),")."]}),Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsxs)("span",{className:"ml-3",children:["Once, the entire grid is filled with noise values, to update the current grid, we use special ANSI escape sequence to move the cursor position to start of the grid.\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"\\033[kA"}),"\xa0moves the cursor back up by\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"k"}),"\xa0units. So when,\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"PerlinDrawConsole"}),"\xa0is called again, we update the grid noise values."]})]})]}),Object(n.jsx)("hr",{className:"hr-style mt-5"}),Object(n.jsxs)("p",{className:"para-content mt-5",children:["Since this is an infinite rendering, we need a way to break the program and exit gracefully. We can do this by using\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"signal handler"}),". What it does is, whenever the user presses\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"Ctrl-C"}),"\xa0on their keyboard, we listen to this signal and instead of exiting the program abruptly, we move down below the grid and then exit with a message.",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),"Add in your\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"main.cpp"}),"\xa0file"]}),Object(n.jsxs)("div",{className:"codefield-container",children:[Object(n.jsxs)("div",{className:"codefield-cpp",children:[Object(n.jsx)("span",{className:"cpp-comments",children:"// when Ctrl-C is pressed"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"void"}),"\xa0ctrlCSignalHandler(",Object(n.jsx)("span",{className:"cpp-dt",children:"int"}),"\xa0signum)",Object(n.jsx)("br",{}),"{",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// go down w_height lines"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"printf"}),"(",Object(n.jsx)("span",{className:"cpp-dt",children:'"\\033[%dB"'}),", w_height);",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"printf"}),'("\\nAight! Imma head out...\\n\\n");',Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"exit"}),"(signum);",Object(n.jsx)("br",{}),"}"]}),Object(n.jsx)("div",{className:"text-center mt-2 lan-id",children:"Language: Cpp"})]}),Object(n.jsxs)("p",{className:"para-content mt-5",children:["This will be our callback (handler) function when\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"Ctrl-C"}),"\xa0is pressed. It takes in a\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"signum"}),"\xa0integer as an argument which is the number associated with the\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"Ctrl-C"}),"\xa0signal.",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),"Now in the body of the function, we move down below the grid using ANSI escape sequence\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"\\033[kB"}),"\xa0which moves the cursor down by\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"k"}),"\xa0units. And then, we print our exit message (which can be anything you like) and lastly we exit the program using\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"exit"}),"\xa0function with the associated\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"signum"}),".",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),"Next section, we will combine everything using a\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"main()"}),"\xa0function in our\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"main.cpp"}),"\xa0file."]})]})};var N=function(){return Object(n.jsxs)(a.Fragment,{children:[Object(n.jsx)("h1",{className:"pn-topic-header mt-5 liner",children:"main()"}),Object(n.jsxs)("p",{className:"para-content",children:["Now everything from here is a cake-walk.",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),"In your\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"main.cpp"}),"\xa0file add"]}),Object(n.jsxs)("div",{className:"codefield-container",children:[Object(n.jsxs)("div",{className:"codefield-cpp",children:[Object(n.jsx)("span",{className:"cpp-comments",children:"// driver code"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"int"}),"\xa0main(",Object(n.jsx)("span",{className:"cpp-dt",children:"int"}),"\xa0argc,\xa0",Object(n.jsx)("span",{className:"cpp-func",children:"char const"}),"\xa0*argv[])",Object(n.jsx)("br",{}),"{",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// register the signal handler"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"signal"}),"(",Object(n.jsx)("span",{className:"cpp-dt",children:"SIGINT"}),", ctrlCSignalHandler);",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// init and activate the noise space"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"SetConsoleSize"}),"();",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"pn_init"}),"();",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// loop and render"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"while"}),"(",Object(n.jsx)("span",{className:"cpp-consts",children:"1"}),")",Object(n.jsx)("br",{}),"{",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"DrawPerlinConsole"}),"();",Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-comments",children:"// explicit sleep function to limit cpu usage"}),Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-func",children:"usleep"}),"(",Object(n.jsx)("span",{className:"cpp-consts",children:"1000"}),");",Object(n.jsx)("br",{}),"}",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"cpp-dt",children:"return"}),"\xa0",Object(n.jsx)("span",{className:"cpp-consts",children:"0"}),";",Object(n.jsx)("br",{}),"}",Object(n.jsx)("br",{})]}),Object(n.jsx)("div",{className:"text-center mt-2 lan-id",children:"Language: Cpp"})]}),Object(n.jsxs)("p",{className:"para-content mt-5",children:[Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsxs)("span",{className:"ml-3",children:["First off, before everything, we register our signal handler using the\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"signal"}),"\xa0function in\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"<csignal>"}),"\xa0header file. It takes the\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"Ctrl-C"}),"\xa0signal number i.e.\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"SIGINT"}),"\xa0(predefined in C++) as the first argument and our custom signal handler as the second argument."]}),Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsx)("span",{className:"ml-3",children:'We then set the console size and "activate" the noise space. It is necessary to generate Perlin Noise values.'}),Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("i",{className:"fa fa-caret-right","aria-hidden":"true"}),Object(n.jsxs)("span",{className:"ml-3",children:["Finally, using an infinite loop, we repeatedly render our visualisation via the\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"DrawPerlinConsole()"}),"\xa0method."]})]}),Object(n.jsxs)("p",{className:"bq mt-4 ml-3 mr-5",children:["Note: Since infinite while loop runs as fast as it can, it will be kind of overkill for us. So I have used the\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"usleep"}),"\xa0function for Linux, which sleeps for 0.001 seconds after every while loop render so as to not overkill the rendering."]}),Object(n.jsx)("div",{className:"text-center",children:Object(n.jsxs)("p",{className:"para-content mt-4",children:["With this, we are done with our\xa0",Object(n.jsx)("span",{className:"backtick-code",children:"main.cpp"}),"\xa0file!",Object(n.jsx)("br",{})]})})]})};var f=function(){return Object(n.jsxs)(a.Fragment,{children:[Object(n.jsx)("h1",{className:"pn-topic-header mt-5 liner",children:"Final Steps"}),Object(n.jsx)("p",{className:"para-content",children:"Last thing left now is to run this program in your terminal using any C++ compiler and witness the rendering in action!"}),Object(n.jsxs)("div",{className:"codefield-container",children:[Object(n.jsxs)("div",{className:"codefield-shell",children:[Object(n.jsx)("span",{className:"shell-prompt",children:"$"}),"\xa0",Object(n.jsx)("span",{className:"shell-cmd",children:"g++"}),"\xa0main.cpp",Object(n.jsx)("br",{}),Object(n.jsx)("span",{className:"shell-prompt",children:"$"}),"\xa0./a.out"]}),Object(n.jsx)("div",{className:"text-center mt-2 lan-id",children:"Language: Shell"})]}),Object(n.jsx)("p",{className:"para-content mt-5",children:"With this, you will see the smooth noise values fill up your screen :)"})]})},g=c.p+"static/media/KALinkImg.3172fc3b.png",w=c.p+"static/media/AdrianIoLinkImg.3dc6065b.png",k=c.p+"static/media/WikiLinkImg.245f484e.jpg",v=c.p+"static/media/Rosetta.3f1f4e29.png",y=c.p+"static/media/Raouf.b6d04df0.png";var P=function(){return Object(n.jsxs)(a.Fragment,{children:[Object(n.jsx)("h1",{className:"pn-topic-header mt-5 liner",children:"Links And Citations"}),Object(n.jsxs)("div",{class:"row",children:[Object(n.jsx)("div",{class:"col-sm-4 mt-5",children:Object(n.jsxs)("div",{class:"card bg-dark link-card",children:[Object(n.jsx)("img",{src:g,class:"card-img-top",alt:"..."}),Object(n.jsxs)("div",{class:"card-body",children:[Object(n.jsx)("h5",{class:"card-title",children:"Perlin Noise: Khan Academy"}),Object(n.jsxs)("p",{class:"card-text",children:["A good random number generator produces numbers that have no relationship and show no discernible pattern.",Object(n.jsx)("br",{}),"As we are beginning to see..."]}),Object(n.jsx)("a",{href:"https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-noise/a/perlin-noise",class:"btn btn-primary",children:"View page"})]})]})}),Object(n.jsx)("div",{class:"col-sm-4 mt-5",children:Object(n.jsxs)("div",{class:"card bg-dark link-card",children:[Object(n.jsx)("img",{src:w,class:"card-img-top",alt:"..."}),Object(n.jsxs)("div",{class:"card-body",children:[Object(n.jsx)("h5",{class:"card-title",children:"Understanding Perlin Noise: Adrain's Soapbox"}),Object(n.jsx)("p",{class:"card-text",children:"The objective of this article is to present an easy-to-understand analysis of Ken Perlin's Improved Perlin Noise."}),Object(n.jsx)("a",{href:"https://adrianb.io/2014/08/09/perlinnoise.html",class:"btn btn-primary",children:"View page"})]})]})}),Object(n.jsx)("div",{class:"col-sm-4 mt-5",children:Object(n.jsxs)("div",{class:"card bg-dark link-card",children:[Object(n.jsx)("img",{src:k,class:"card-img-top",alt:"..."}),Object(n.jsxs)("div",{class:"card-body",children:[Object(n.jsx)("h5",{class:"card-title",children:"Wikipedia: Perlin Noise"}),Object(n.jsx)("p",{class:"card-text",children:'Perlin noise is a type of gradient noise developed by Ken Perlin. He developed perlin noise in 1983 as a result of his frustration with the "machine-like" look...'}),Object(n.jsx)("a",{href:"https://en.wikipedia.org/wiki/Perlin_noise",class:"btn btn-primary",children:"View page"})]})]})}),Object(n.jsx)("div",{class:"col-sm-4 mt-5",children:Object(n.jsxs)("div",{class:"card bg-dark link-card",children:[Object(n.jsx)("img",{src:v,class:"card-img-top",alt:"..."}),Object(n.jsxs)("div",{class:"card-body",children:[Object(n.jsx)("h5",{class:"card-title",children:"Rosetta Code: Perlin Noise Implementations"}),Object(n.jsx)("p",{class:"card-text",children:"Implementation of the Perlin Noise algorithm in various languages..."}),Object(n.jsx)("a",{href:"https://rosettacode.org/wiki/Perlin_noise",class:"btn btn-primary",children:"View page"})]})]})}),Object(n.jsx)("div",{class:"col-sm-4 mt-5",children:Object(n.jsxs)("div",{class:"card bg-dark link-card",children:[Object(n.jsx)("img",{src:y,class:"card-img-top",alt:"..."}),Object(n.jsxs)("div",{class:"card-body",children:[Object(n.jsx)("h5",{class:"card-title",children:"Raouf's Blog: A Procedural Generation Algorithm"}),Object(n.jsx)("p",{class:"card-text",children:"Perlin noise is a popular procedural generation algorithm invented by Ken Perlin..."}),Object(n.jsx)("a",{href:"https://rtouti.github.io/graphics/perlin-noise-algorithm#:~:text=Perlin%20noise%20is%20a%20popular,by%20an%20artist%20or%20designer.&text=Simplex%20noise%20is%20different%20but,Value%20noise%20is%20also%20different.",class:"btn btn-primary",children:"View page"})]})]})})]}),Object(n.jsxs)("div",{className:"text-center mt-5",children:[Object(n.jsx)("p",{className:"mt-3 hr-style1"}),Object(n.jsxs)("p",{className:"para-content author mt-3",children:["Penned by \u270d\ufe0f:",Object(n.jsx)("br",{}),"Maharshi Pandya"]}),Object(n.jsx)("p",{className:"mt-3 hr-style1"})]})]})};var C=function(){return Object(n.jsx)(a.Fragment,{children:Object(n.jsxs)("div",{className:"container mt-4 text-white",children:[Object(n.jsx)(j,{}),Object(n.jsx)(o,{}),Object(n.jsx)(b,{}),Object(n.jsx)(h,{}),Object(n.jsx)(p,{}),Object(n.jsx)(u,{}),Object(n.jsx)(N,{}),Object(n.jsx)(f,{}),Object(n.jsx)(P,{})]})})};var I=function(){return Object(n.jsxs)(a.Fragment,{children:[Object(n.jsx)(r,{}),Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)("br",{}),Object(n.jsx)(C,{})]})};i.a.render(Object(n.jsx)(I,{}),document.getElementById("root"))},8:function(e,s,c){},9:function(e,s,c){}},[[11,1,2]]]);
//# sourceMappingURL=main.91a725c7.chunk.js.map